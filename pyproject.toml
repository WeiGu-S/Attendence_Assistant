[build-system]
requires = ["hatchling","common"]
build-backend = "hatchling.build"

[project]
name = "attendance-assistant"
version = "1.0.0"
description = "考勤图片解析可视化桌面应用程序"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Attendance Assistant Team", email = "dev@attendance-assistant.com"}
]
maintainers = [
    {name = "Attendance Assistant Team", email = "dev@attendance-assistant.com"}
]
keywords = ["attendance", "ocr", "image-processing", "desktop-app", "pyqt5"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Environment :: X11 Applications :: Qt",
]
dependencies = [
    "PyQt5>=5.15.10,<6.0.0",
    "paddleocr>=2.7.0,<3.0.0", 
    "opencv-python>=4.8.0,<5.0.0",
    "pandas>=2.0.0,<3.0.0",
    "numpy>=1.24.0,<2.0.0",
    "openpyxl>=3.1.0,<4.0.0",
    "python-dateutil>=2.8.0,<3.0.0",
    "Pillow>=10.0.0,<11.0.0",
    "pytesseract>=0.3.13",
    "paddlepaddle>=2.6.0,<3.0.0",
]
requires-python = ">=3.9"

[project.urls]
Homepage = "https://github.com/your-org/attendance-assistant"
Documentation = "https://github.com/your-org/attendance-assistant/docs"
Repository = "https://github.com/your-org/attendance-assistant.git"
"Bug Tracker" = "https://github.com/your-org/attendance-assistant/issues"

[project.scripts]
attendance-assistant = "attendance_assistant.__main__:main"

[project.gui-scripts]
attendance-assistant-gui = "attendance_assistant.__main__:main"

[project.optional-dependencies]
dev = [
    "black>=24.0.0",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-qt>=4.3.0",
    "pre-commit>=3.6.0",
    "build>=1.0.0",
    "pyinstaller>=6.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-qt>=4.0.0",
]
build = [
    "build>=0.10.0",
    "pyinstaller>=5.0.0",
]

[tool.uv]
dev-dependencies = [
    "black>=24.0.0",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-qt>=4.3.0",
    "pre-commit>=3.6.0",
    "build>=1.0.0",
    "pyinstaller>=6.0.0",
]
constraint-dependencies = [
    "stringzilla<4.0.0",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".mypy_cache",
]

[tool.mypy]
python_version = "3.8.1"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "paddleocr.*",
    "cv2.*",
    "numpy.*",
    "pandas.*",
    "openpyxl.*",
    "PyQt5.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=attendance_assistant",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["attendance_assistant"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
